  const handleSaveMessage = async (req, res) => {
        const data = req.body;
    
        // Perform validations
        const requiredFieldsCheck = checkRequiredFields(data, ['product_id', 'companyName', 'industryType', 'userName', 'mobileNumber', 'email']);
        if (!requiredFieldsCheck.success) {
            return res.status(400).json(requiredFieldsCheck);
        }
    
        const stacks = data.stacks || data.stackData;
        if (!Array.isArray(stacks) || stacks.length === 0) {
            return res.status(400).json({ success: false, message: 'Stacks data is required.', missingFields: ['stacks'] });
        }
    
        const user = await userdb.findOne({ userName: data.userName });
        const exceedanceCheck = await checkExceedance(stacks, user);
        const timeIntervalCheck = await checkTimeInterval(data, user);
    
        // Format date and time
        const date = moment().format('DD/MM/YYYY');
        const time = moment().tz('Asia/Kolkata').format('HH:mm:ss');
    
        // Emit real-time data before saving
        req.io.to(data.userName).emit('stackDataUpdate', {
            userName: data.userName, // Send userName at top level
            exceedanceComment: exceedanceCheck.exceedanceDetected ? 'Parameter exceedance detected' : 'Within limits', // General exceedance comment
            ExceedanceColor: exceedanceCheck.exceedanceDetected ? 'red' : 'green', // General color coding for exceedance
            timeIntervalComment: timeIntervalCheck.intervalExceeded ? 'Time interval exceeded' : 'Within allowed time interval', // General time interval comment
            timeIntervalColor: timeIntervalCheck.intervalExceeded ? 'purple' : 'green', // General color coding for time interval
            stackData: stacks.map(stack => ({ ...stack })), // Include stack data"
           
            timestamp: new Date(),
        });
    
        // Remove power, current, and other unnecessary fields before saving to the database
        const sanitizedStackData = stacks.map(stack => {
            const { power, current, voltage, flowRate, ...restOfStack } = stack;
            return restOfStack;
        });
    
        const newEntryData = {
            ...data,
            stackData: sanitizedStackData,
            date,
            time,
            timestamp: new Date(),
            exceedanceComment: exceedanceCheck.exceedanceDetected ? 'Parameter exceedance detected' : 'Within limits',
            ExceedanceColor: exceedanceCheck.exceedanceDetected ? 'red' : 'green',
            timeIntervalComment: timeIntervalCheck.intervalExceeded ? 'Time interval exceeded' : 'Within allowed time interval',
            timeIntervalColor: timeIntervalCheck.intervalExceeded ? 'purple' : 'green',
            validationMessage: data.validationMessage || 'Validated',
            validationStatus: data.validationStatus || 'Valid',
        };
    
        // Save to database and update max/min values
        try {
            const newEntry = new IotData(newEntryData);
            await newEntry.save();
    
            // Update max and min values for stack data
            await updateMaxMinValues(newEntryData);
    
            // Handle additional functionalities
            handleExceedValues();
            await saveOrUpdateLastEntryByUserName(newEntryData);
    
            res.status(200).json({
                success: true,
                message: 'New Entry data saved successfully',
                newEntry,
            });
        } catch (error) {
            console.error('Error saving data:', error);
            res.status(500).json({ success: false, message: 'Error saving data', error: error.message });
        }
    };
    


    ///Report

    //Download Report as PDF

// Updated downloadReportAsPDF function
// const downloadReportAsPDF = async (req, res) => {
//     try {
//       const { userId } = req.params;
//       const report = await Report.findById(userId);
  
//       if (!report) {
//         return res.status(404).json({ message: 'Report not found' });
//       }
  
//       // Generate HTML content for the report
//       const htmlContent = generateHTMLContentForReport(report);
  
//       // Generate PDF from the HTML content
//       const options = { format: 'A4', orientation: 'portrait', border: '10mm' };
//       pdf.create(htmlContent, options).toStream((err, stream) => {
//         if (err) {
//           console.error('Error generating PDF:', err);
//           return res.status(500).json({ message: 'Error generating PDF' });
//         }
  
//         res.setHeader('Content-Type', 'application/pdf');
//         res.setHeader('Content-Disposition', `attachment; filename=report-${userId}.pdf`);
//         stream.pipe(res);
//       });
//     } catch (error) {
//       res.status(500).json({
//         status: 500,
//         success: false,
//         message: 'Error downloading report',
//         error: error.message,
//       });
//     }
//   };